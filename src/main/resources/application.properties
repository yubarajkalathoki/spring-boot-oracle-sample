server.port = 8181
server.context-path=/oracle-test

# ===================================================================================
#                           DATA SOURCE CONFIGURATION
# ===================================================================================
spring.datasource.url = jdbc:oracle:thin:@//localhost:1521/XE
spring.datasource.username = system
spring.datasource.password = oracle
spring.datasource.driverClassName = oracle.jdbc.OracleDriver
spring.jpa.database = ORACLE

# ===================================================================================
#                           HIBERNATE JPA CONFIGURATION
# ===================================================================================
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
spring.jpa.show-sql = true
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

## Naming strategy
#If non of the naming-strategy is provided then default table name will be _x_ and same as for column name i.e _x_
#By default Spring uses org.springframework.boot.orm.jpa.SpringNamingStrategy to generate table names. This is a
#very thin extension of org.hibernate.cfg.ImprovedNamingStrategy. The tableName method in that class is passed a
#source String value but it is unaware if it comes from a @Column.name attribute or if it has been implicitly
#generated from the field name.
#The ImprovedNamingStrategy will convert CamelCase to SNAKE_CASE where as the EJB3NamingStrategy just uses the
#table name unchanged.
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.EJB3NamingStrategy

#=========================
#Error handling
#=========================
spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false